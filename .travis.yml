sudo: required

language: go
go_import_path: github.com/jaegertracing/jaeger

dist: bionic

matrix:
  include:
  - go: "1.15.x"
    env:
    - TESTS=true
    - COVERAGE=true
  - go: "1.15.x"
    env:
    - PROTO_GEN_TEST=true
  - go: "1.15.x"
    env:
    - ALL_IN_ONE=true
  - go: "1.15.x"
    env:
    - CROSSDOCK=true
  - go: "1.15.x"
    env:
    - CROSSDOCK_OTEL=true
  - go: "1.15.x"
    env:
    - DOCKER=true
    - DEPLOY=true
  - go: "1.15.x"
    env:
    - ES_INTEGRATION_TEST=true
  - go: "1.15.x"
    env:
    - ES_OTEL_INTEGRATION_TEST=true
  - go: "1.15.x"
    env:
    - KAFKA_INTEGRATION_TEST=true
  - go: "1.15.x"
    env:
    - CASSANDRA_INTEGRATION_TEST=true
  - go: "1.15.x"
    env:
    - MEM_AND_BADGER_INTEGRATION_TEST=true
  - go: "1.15.x"
    env:
    - HOTROD=true

services:
  - docker

env:
  global:
    - DOCKER_COMPOSE_VERSION=1.8.0
    - COMMIT=${TRAVIS_COMMIT::8}
    # override default yarn
    - PATH=$HOME/.yarn/bin:$PATH

install:
  - docker rmi $(docker images -q) || true
  - travis_retry make install-ci
  - if [ "$ALL_IN_ONE" == true ]; then bash ./scripts/travis/install-ui-deps.sh ; fi
  - if [ "$DOCKER" == true ]; then bash ./scripts/travis/install-ui-deps.sh ; fi
  - if [ "$CROSSDOCK" == true ]; then bash ./scripts/travis/install-crossdock-deps.sh ; fi

script:
  - export BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
  - if [ "$TESTS" == true ]; then make test-ci ; else echo 'skipping tests'; fi
  - if [ "$PROTO_GEN_TEST" == true ]; then make proto && git diff --name-status --exit-code ; else echo 'skipping protoc validation'; fi
  - if [ "$ALL_IN_ONE" == true ]; then bash ./scripts/travis/build-all-in-one-image.sh ; else echo 'skipping all_in_one'; fi
  - if [ "$CROSSDOCK" == true ]; then travis_retry bash ./scripts/travis/build-crossdock.sh ; else echo 'skipping crossdock'; fi
  - if [ "$CROSSDOCK_OTEL" == true ]; then travis_retry make build-crossdock crossdock-otel ; else echo 'skipping OpenTelemetry crossdock'; fi
  - if [ "$DOCKER" == true ]; then bash ./scripts/travis/build-docker-images.sh ; else echo 'skipping build-docker-images'; fi
  - if [ "$DOCKER" == true ]; then bash ./scripts/travis/upload-all-docker-images.sh ; else echo 'skipping docker upload'; fi
  - if [ "$DEPLOY" == true ]; then make build-all-platforms ; else echo 'skipping build-all-platforms'; fi
  - if [ "$ES_INTEGRATION_TEST" == true ]; then travis_retry bash ./scripts/travis/es-integration-test.sh ; else echo 'skipping elastic search integration test'; fi
  - if [ "$ES_OTEL_INTEGRATION_TEST" == true ]; then travis_retry bash ./scripts/travis/es-integration-test.sh ; else echo 'skipping elastic search integration test'; fi
  - if [ "$KAFKA_INTEGRATION_TEST" == true ]; then travis_retry bash ./scripts/travis/kafka-integration-test.sh ; else echo 'skipping kafka integration test'; fi
  - if [ "$CASSANDRA_INTEGRATION_TEST" == true ]; then travis_retry bash ./scripts/travis/cassandra-integration-test.sh ; else echo 'skipping cassandra integration test'; fi
  - if [ "$MEM_AND_BADGER_INTEGRATION_TEST" == true ]; then travis_retry make mem-and-badger-storage-integration-test ; else echo 'skipping mem and badger integration test'; fi
  - if [ "$HOTROD" == true ]; then bash ./scripts/travis/hotrod-integration-test.sh ; else echo 'skipping hotrod example'; fi

after_success:
  - if [ "$COVERAGE" == true ]; then mv cover.out coverage.txt ; else echo 'skipping coverage'; fi
  - if [ "$COVERAGE" == true ]; then bash <(curl -s https://codecov.io/bash) ; else echo 'skipping coverage'; fi

after_failure:
  - if [ "$CROSSDOCK" == true || "$CROSSDOCK_OTEL" == true ]; then make crossdock-logs ; else echo 'skipping crossdock'; fi

before_deploy:
  - if [ "$DEPLOY" == true ]; then bash ./scripts/travis/package-deploy.sh ; else echo 'skipping deploying binaries'; fi

deploy:
  provider: releases
  api_key:
    secure: P3+TKR3y4S51jjMp4l9kRm5cjr7Mg2m5rlPcRCjjVp/mVgkkhsMx9K8Rj/Cv/pJe33jbkwRy020gq4lYpa+Yh+Q3A11z3EKXyqizwqsvJtufoIXxXCxt0kLXn8aIh7aLrqVT2wxtkv3RvkRODmLZqvWG4kAfNBuzpcFhstw1RU3WNyahStOgwVJ9tYRdpsJ0ztMmGgQFpT6bppselzEXY7hS7L+l/bLcH9aGON4YECupAE6EilWwGxPs4oLJPmGsWQNogb3SE/oeFDqEJzciWcObk264fwIBf28HtmszQSmVbOuOfg/OhcVg13OvPXmRGk9hvU2kyzehMLZ0zeEE1mKsGmoObziNVuYPPY3KbRlsYARX41M1QKAI1YFe9NIXC5yhemOy4Xv0g82jyZmYWrf6QydLBZWkztUL7mJ6DkrG+5EohVVC2oprBS32/w736f8AWwHJSfL/JrFMTDctdYzUaf0yZMdfKdLdRyP/Q5KTfhUJl8zHAOih8f23WJVCSlwyJBYDzkq5OmNGf7BxJYkJExUOUwXcJE9jYgXq0y291N9BtG2cUVKhZZsSSrvR32bMtYtTT2a3ZlTHJpzVI+lZStYDpE/wyJRqnjqf9p8bDxc1l2mQGSxgyY8Yv8u9c+RCCj4tRwZTrJ4LIBWecDPS5hobV3Q1Dg3sW2UGRXA=
  file_glob: true
  file:
    - deploy/*.tar.gz
  skip_cleanup: true
  on:
    tags: true
    repo: jaegertracing/jaeger
    branch: master
